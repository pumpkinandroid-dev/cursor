https://blog.csdn.net/qq_37703224/article/details/148218248
https://developer.aliyun.com/article/1660485
irm https://raw.githubusercontent.com/yeongpin/cursor-free-vip/main/scripts/install.ps1 | iex

Cursor 中配置 GitHub MCP 的核心是通过 mcp.json 文件添加 GitHub MCP 服务器信息，并获取 GitHub Personal Access Token 以完成身份验证。具体步骤如下：
1. 配置 MCP 服务器信息
在 Cursor 的设置中，进入 Features > MCP，点击 "Add New MCP Server"，填写以下配置内容：
json

暗色
复制
{
  "mcpServers": {
    "github": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-github"
      ],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "<YOUR_TOKEN>"
      }
    }
  }
}
command: 启动 MCP 服务器的命令，此处为 npx。
args: 传递给 npx 的参数，用于安装并运行 GitHub MCP 服务器。
env: 环境变量，需替换 <YOUR_TOKEN> 为你的 GitHub 个人访问令牌1。
2. 获取 GitHub Personal Access Token
登录 GitHub，点击右上角头像，选择 Settings。
在左侧菜单中点击 Developer settings。
选择 Personal access tokens，然后点击 Tokens (classic)。
创建一个新的 Token，确保勾选所需权限（如 repo 和 write:packages）。
复制生成的 Token，替换配置中的 <YOUR_TOKEN>12。
3. 验证与使用
配置保存后，Cursor 会尝试连接 GitHub MCP 服务器。
若连接成功，MCP 状态会显示为绿色，并提示“X tools enabled”。
可在 Cursor 的 Agent 模式下测试功能，如创建仓库、提交代码等，Agent 会自动调用 GitHub MCP 完成操作3。

生成一个cnbeta网站内容摘要项目，前端使用js，后端使用java servlet，web服务器使用jetty。
后端功能：n是页号变量，系统启动初始是1，后面接收前端发送设置，获取网页https://m.cnbeta.com.tw/wap/index.htm?page=n 的内容，解析出 id 为 "info_list" 的 div 元素，
从该 div 中提取所有文章链接，把它的链接文本作为标题文本，把它的链接地址作为标题链接地址，
对每个文章链接，获取其页面内容，查找classs为time的第一个元素，提取其中的文本内容作为备注文本，查找 id 为 "artibody" 的元素，
然后在该元素下查找第一个 p 标签，
提取这个 p 标签的文本内容作为摘要文本，
增加更细致的错误处理，分别处理未找到标签元素的情况。
每个文章链接网页产生4个信息：标题文本，标题链接地址，备注文本，摘要文本，把这4个信息发送到前端。每个文章链接网页信息提取完成后加入了线程休眠，避免请求过于频繁。
前端功能：前端网页对接收的每个链接网页4个信息这样显示，上面显示标题文本，是链接网页元素，内含标题链接地址，字体大小30px，中间显示备注文本，字体大小10px，下面显示摘要文本，字体大小20px，所有链接网页信息从上到下依次显示，每个链接网页信息显示之间间隔2行，网页底端有“首页”链接，“前一页”链接，“后一页”链接，页面本地保存页号变量，初始页号变量是1，点击“首页”，页号设为1，点击“前一页”，页号减1，点击“后一页”，页号加1，检测保证页号变量大于等于1，页面底端三个链接点击时将页号变量做相应处理后发送到后端。